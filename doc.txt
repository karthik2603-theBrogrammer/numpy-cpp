INFO: In case the shell script says 
`zsh: permission denied: ./start-all.sh`

Execute:
❯ chmod +x start-all.sh

Then:
❯ ./start-all.sh



NdArray<double> arr({2, 3}, 1.5, 2, 3, 4, 5, 6);
arr.show();

NdArray<double> arr2({2, 3}, 1, 2, 3, 4, 5, 9);
arr2.show();

// Performing addition operation on NdArray objects
auto result = NdArrayOp::add(arr, arr2);
std::cout << "Result of addition:" << std::endl;
result.show();

// Performing subtraction operation on NdArray objects
result = NdArrayOp::sub(arr, arr2);
std::cout << "Result of subtraction:" << std::endl;
result.show();

// Performing multiplication operation on NdArray objects
result = NdArrayOp::mul(arr, arr2);
std::cout << "Result of multiplication:" << std::endl;
result.show();

// Performing division operation on NdArray objects
result = NdArrayOp::div(arr, arr2);
std::cout << "Result of division:" << std::endl;
result.show();

// Performing exponentiation operation on NdArray objects
result = NdArrayOp::pow(arr, arr2);
std::cout << "Result of exponentiation:" << std::endl;
result.show();

// Performing dot product operation on NdArray objects
std::cout << "Dot product of arr and arr2:" << std::endl;
std::cout << NdArrayOp::dot(arr, arr2) << std::endl;

// Creating an NdArray initialized with zeros
NdArray<double> ar({3, 3});
// Call the z() function to initialize the array with zeros
NdArray<double> zeroArray = ar.z();

// Display the array
std::cout << "Zero array:" << std::endl;
zeroArray.show();


Where Variadic Templates
------------------------

The template takes variable number of arguments, each element to fit in the numpy array as one.
It handles insertion of the numpy array, and when reached base case, it terminates.

// Helper function to initialize elements of the array
template <typename Arg, typename... Args>
void initializeElements(int &index, Arg value, Args... args)
{
    data[index++] = value;
    initializeElements(index, args...); // Recursive call to handle remaining arguments
}





What Is strides and how is it beneficial ?
-----------------------------------------

Let's say you have a 3x4x5 array. The strides would be calculated as follows:
Stride for the last dimension (5 elements): 1
Stride for the second dimension (4 rows * 5 elements): 5
Stride for the first dimension (3 rows * 4 columns * 5 elements): 20
So, if you want to access the element at coordinates (2, 3, 1), you'd calculate the index as 2 * 20 + 3 * 5 + 1 * 1 = 71, and then use this index to access the element in the underlying one-dimensional array.


Where Template Specialisation ?
------------------------------

In the code snippet you provided, template specialization is not explicitly used. However, 
there is a form of partial specialization used with std::enable_if in the class template NdArray.

Let's break down the line where it's used:
template <typename T, typename Enable = void>
class NdArray;


Lambda Templates
----------------


Lambda templates allow lambda functions that use template parameters as the function
parameters itself.